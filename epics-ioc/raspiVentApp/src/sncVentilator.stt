/*
 * Project       :
 * Docs: https://www-csr.bessy.de/control/SoftDist/sequencer/
 *
 * File          :
 *
 *
 */

program sncVentilator
/* CONSTANT DECLARATIONS */
short NO_ALARM=0;
short MINOR=1;
short MAJOR=2;
short INVALID=3;

/*Vent States*/
short OPM_VolumeControl   =2;
short OPM_PressureControl =3;
short POS_Stopped =0;
short POS_Starting=1;
short POS_Process =2;
short POS_Clean =3;
short POS_WaitShot=4;
short POS_Stopping=5;
short POS_Emergency=6;

/* IOC PV monitored variables */
short   OpMode;
assign  OpMode to "{user}:OPMODE";
monitor OpMode;

// short   FlowDir;
// assign  FlowDir to "{user}:Flow-Direction";
// monitor FlowDir;

float   CycleTime;
assign  CycleTime to "{user}:TIME-COUNTER";
monitor CycleTime;

float   RespRate;
assign  RespRate to "{user}:Set-RespRate";
monitor RespRate;

float   RrMaxTime;
assign  RrMaxTime to "{user}:RR-MAXTIME";
monitor RrMaxTime;

float   SensorPressure;
assign  SensorPressure to "{user}:Sensor-Pressure";
monitor SensorPressure;

float SensorVolume;
assign SensorVolume to "{user}:Sensor-Volume";
monitor SensorVolume;

// Varuables set by the doctor

float   SetVt;
assign  SetVt to "{user}:Set-Vt";

float   SetPpeak;
assign  SetPpeak to "{user}:Set-Ppeak";

float   SetTinsp;
assign  SetTinsp to "{user}:Set-Tinsp";

float   SetPEEP;
assign  SetPEEP to "{user}:Set-PEEP";

// Variables calculated from states or other variables

float SensorPpeak;
assign SensorPpeak to "{user}:Sensor-Ppeak";
monitor SensorPpeak;

float SensorPEEP;
assign SensorPEEP to "{user}:Sensor-PEEP";
monitor SensorPEEP;


/* IOC PV actuator variables */
short   ValveInsp;
assign  ValveInsp to "{user}:Set-Vinsp";

short   ValveExp;
assign  ValveExp to "{user}:Set-Vexp";


/*   BUzzer */

/* Trace message record limited to 40 characters */
string msg;
assign msg to "{user}:TraceMessage.VAL";
/*
double v;
assign v to "{user}:aiExample";
monitor v;

ss ss1 {
    state init {
    when (delay(10)) {
        printf("sncExample: Startup delay over\n");
    } state low
    }
    state low {
    when (v > 5.0) {
        printf("sncExample: Changing to high\n");
    } state high
    }
    state high {
    when (v <= 5.0) {
        printf("sncExample: Changing to low\n");
    } state low
    }
}
*/

/* Volume Control State Set */
//Expiration cycling can be set by time or the pressure limit. 
//Once the Ti (inspiratory time) is reached, or a pressure limit 
//is reached the ventilator will cycle into expiratory mode and allow 
//passive exhalation until another breath is triggered. */

ss VolControl {
    state NON_VC {
        entry {
            strcpy(msg, "INIT: Sequence Entry");
            pvPut(msg);
            errlogSevPrintf(NO_ALARM, "%s\n",msg);

            strcpy(msg, "Initializing...");
            pvPut(msg);
            errlogSevPrintf(NO_ALARM, "%s\n",msg);
        }
        when (OpMode == OPM_VolumeControl)    {
            printf("sncVentilator: Startup delay over\n");
        } state Idle_VC
    }
    state Idle_VC {
        when (OpMode != OPM_VolumeControl)    {
            printf("sncVentilator: Ending VC Mode \n");
        } state NON_VC
        when (CycleTime <= 0.1) { //check this condition of time
            printf("sncVentilator: VC Mode: Changing to Inspiration\n");
            ValveInsp = 255; // Open valve, change to amount of based on Tinsp (SetVt/Tinsp)
            pvPut(ValveInsp);
        } state Inspiration_VC
    }
    state Inspiration_VC {
        when (OpMode != OPM_VolumeControl)    {
            printf("sncVentilator: Ending Insp VC Mode \n");
            /*Close Vinps, Open Vexp*/ 
        } state NON_VC
        when (SensorVolume >= SetVt) { //we should add condition if SensorPressure>= Set-Ppeak
            printf("sncVentilator: VC Mode: Changing to Expiration\n");
            ValveInsp = 0; // Close Vinsp
            pvPut(ValveInsp);
            ValveExp = 255; // Open Vexp
            pvPut(ValveExp);
            SensorPpeak = SensorPressure;            
            pvPut(SensorPpeak);
        } state Expiration_VC 
    }
    state Expiration_VC {
        when (OpMode != OPM_VolumeControl)    {
            printf("sncVentilator: Ending cycle VC Mode \n");
            /*Close Vexp*/ 
        } state NON_VC
        when (CycleTime >= RrMaxTime || SensorPressure <= SetPEEP) {
            printf("sncVentilator: VC Mode: Changing to Inspiration\n");
            ValveExp = 0; // Close Vexp
            pvPut(ValveInsp);
            SensorPEEP = SensorPressure;            
            pvPut(SensorPpeak);
        }state Idle_VC
    }
}
/* Presure Control State Set */
ss PressControl {
    state NON_PC {
        entry {
            strcpy(msg, "INIT: Sequence Entry");
            pvPut(msg);
            errlogSevPrintf(NO_ALARM, "%s\n",msg);

            strcpy(msg, "Initializing...");
            pvPut(msg);
            errlogSevPrintf(NO_ALARM, "%s\n",msg);
        }
        when (OpMode == OPM_PressureControl )    {
            printf("sncVentilator: Startup delay over\n");
        } state Idle_PC
    }
    state Idle_PC {
        when (OpMode != OPM_PressureControl)    {
            printf("sncVentilator: Ending PC Mode \n");
        } state NON_PC
        when (CycleTime == 0.0) {
            printf("sncVentilator: PC Mode: Changing to Inspiration\n");
            ValveInsp = 1; // Change to CONSTANT
            pvPut(ValveInsp);
        } state Inspiration_PC
    }
    state Inspiration_PC {
        when (OpMode != OPM_PressureControl)    {
            printf("sncVentilator: Ending PC Mode \n");
            /*Close Valves*/ 
        } state NON_PC
        when (SensorPressure == SetPpeak) {
            printf("sncVentilator: PC Mode: Changing to Expiration\n");
            ValveInsp = 0; // Change to CONSTANT
            pvPut(ValveInsp);
            ValveExp = 1; // Change to CONSTANT
            pvPut(ValveExp);
        } state Expiration_PC 
    }
    state Expiration_PC {
        when (OpMode != OPM_PressureControl)    {
            printf("sncVentilator: Ending PC Mode \n");
            /*Close Valves*/ 
        } state NON_PC
        when (CycleTime >= RrMaxTime || SensorPressure <= SetPEEP) {
            printf("sncVentilator: PC Mode: Changing to Inspiration\n");
            ValveInsp = 0; // Change to CONSTANT
            pvPut(ValveInsp);
        } state Inspiration_PC
    }
}
