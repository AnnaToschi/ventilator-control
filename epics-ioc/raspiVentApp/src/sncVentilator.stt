/*
 * Project       :
 * Docs: https://www-csr.bessy.de/control/SoftDist/sequencer/
 *
 * File          :
 *
 *
 */

program sncVentilator
/* CONSTANT DECLARATIONS */
short NO_ALARM=0;
short MINOR=1;
short MAJOR=2;
short INVALID=3;

/*Vent States*/
short OPM_VolumeControl   =2;
short OPM_PressureControl =3;
short OPM_PressureSupport =4;
short POS_Emergency=6;

/* IOC PV monitored variables */
short   OpMode;
assign  OpMode to "{user}:OPMODE";
monitor OpMode;

// short   FlowDir;
// assign  FlowDir to "{user}:Flow-Direction";
// monitor FlowDir;

float   CycleTime;
assign  CycleTime to "{user}:TIME-COUNTER";
monitor CycleTime;

float   RrMaxTime;
assign  RrMaxTime to "{user}:RR-MAXTIME";
monitor RrMaxTime;

float   SensorPressure;
assign  SensorPressure to "{user}:Sensor-Pinsp"; //when connecting to arduino: Sensor-Pinsp
monitor SensorPressure;

float   SensorPressurePS;
assign  SensorPressurePS to "{user}:Sensor-Pressure-PS"; // Simlating Patient00 insp
monitor SensorPressurePS;

float SensorVolume;
assign SensorVolume to "{user}:Sensor-Vt"; //when connecting to arduino: Sensor-Vt
monitor SensorVolume;

float SensorVolumeCalibrated;
assign SensorVolumeCalibrated to "{user}:Calibrated-Vt"; //when connecting to arduino: Sensor-Vt
monitor SensorVolumeCalibrated;

float LastVinspVal;
assign LastVinspVal to "{user}:Last-Vinsp-Val"; //when connecting to arduino: Sensor-Vt
monitor LastVinspVal;

// Variables set by the doctor
float   RespRate;
assign  RespRate to "{user}:Set-RespRate";
monitor RespRate;

float   SetVt;
assign  SetVt to "{user}:Set-Vt";
monitor SetVt;

float   SetPpeak;
assign  SetPpeak to "{user}:Set-Ppeak";
monitor SetPpeak;

float   SetTinsp;
assign  SetTinsp to "{user}:Set-Tinsp";
monitor SetTinsp;

float   SetPEEP;
assign  SetPEEP to "{user}:Set-PEEP";
monitor SetPEEP;

float   SetPtrigger;
assign  SetPtrigger to "{user}:Set-Ptrigger";
monitor SetPtrigger;

// Variables calculated within states

float SensorPpeak;
assign SensorPpeak to "{user}:Sensor-Ppeak";
monitor SensorPpeak;

float SensorPEEP;
assign SensorPEEP to "{user}:Sensor-PEEP";
monitor SensorPEEP;

float SensorVolExp;
assign SensorVolExp to "{user}:Volume-expiration";
monitor SensorVolExp;

float SensorMaxVol;
assign SensorMaxVol to "{user}:Sensor-Max-Vol";
monitor SensorMaxVol;

float InspExpState;
assign InspExpState to "{user}:Set-InspExpState";
monitor InspExpState;



/* IOC PV actuator variables */
short   ValveInsp;
assign  ValveInsp to "{user}:Set-Vinsp";

short   ValveExp;
assign  ValveExp to "{user}:Set-Vexp";

float FlowFromTable;
assign FlowFromTable to "{user}:subExample";
monitor FlowFromTable;

float  RefPinspPC;
assign RefPinspPC to "{user}:Ref-Pinsp-PC";

/*   BUzzer */

/* Trace message record limited to 40 characters */
string msg;
assign msg to "{user}:TraceMessage.VAL";

/* Volume Control State Set */
//Expiration cycling can be set by time or the pressure limit.
//Once the Ti (inspiratory time) is reached, or a pressure limit
//is reached the ventilator will cycle into expiratory mode and allow
//passive exhalation until another breath is triggered. */

ss VolControl {
    state NON_VC {
        when (OpMode == OPM_VolumeControl)    {
            printf("sncVentilator: Startup delay over\n");
            ValveInsp = 100;
        } state Idle_VC
    }
    state Idle_VC {
        when (OpMode != OPM_VolumeControl)    {
            printf("sncVentilator: Ending VC Mode \n");
        } state NON_VC
         when (CycleTime <= 0.1) { //check this condition of time
            printf("sncVentilator: VC Mode: Changing to Inspiration\n");
            // Open valve, change to amount of based on Tinsp (SetVt/Tinsp)
            ValveInsp = 100;
            pvPut(ValveInsp);
            SensorVolExp = SensorVolume;
            pvPut(SensorVolExp);
            LastVinspVal = ValveInsp;
            pvPut(LastVinspVal);
            InspExpState = 1;
            pvPut(InspExpState);
        } state Inspiration_VC
    }
    state Inspiration_VC {
        when (OpMode != OPM_VolumeControl)    {
            printf("sncVentilator: Ending Insp VC Mode \n");
            /*Close Vinps, Open Vexp*/
        } state NON_VC
        when (CycleTime >= SetTinsp) { //we should add condition if SensorPressure>= SetPpeak
            printf("sncVentilator: VC Mode: Changing to Expiration Time\n");
            printf("SensorMaxVol = %.2f , SetVt = %.2f, ValveInsp = %d \n", SensorMaxVol, SetVt, ValveInsp);
            ValveInsp = 0; // Close Vinsp
            pvPut(ValveInsp);
            ValveExp = 1; // Open Vexp
            pvPut(ValveExp);
            SensorPpeak = SensorPressure;
            pvPut(SensorPpeak);
            SensorMaxVol = SensorVolumeCalibrated;
            pvPut(SensorMaxVol);
            // if (SensorMaxVol < (SetVt - 30)){
            //     ValveInsp = LastVinspVal + 5;
            // }
            // else if(SensorMaxVol > (SetVt + 30)){
            //     ValveInsp = LastVinspVal - 5;
            // }
            // else{
            //     ValveInsp = LastVinspVal;
            // }
            InspExpState = 2;
            pvPut(InspExpState);
        } state Expiration_VC
        when (SensorMaxVol >= SetVt) { //we should add condition if SensorPressure>= SetPpeak
            printf("sncVentilator: VC Mode: Changing to Expiration Vol\n");
            printf("SensorMaxVol = %.2f , SetVt = %.2f, ValveInsp = %d \n", SensorMaxVol,SetVt, ValveInsp);
            ValveInsp = 0; // Close Vinsp
            pvPut(ValveInsp);
            ValveExp = 1; // Open Vexp
            pvPut(ValveExp);
            SensorPpeak = SensorPressure;
            pvPut(SensorPpeak);
            SensorMaxVol = SensorVolumeCalibrated;
            pvPut(SensorMaxVol);
            // if (CycleTime < (SetTinsp - 0.3)){
            //     ValveInsp = LastVinspVal - 5;
            // }
            // else if(CycleTime > (SetTinsp + 0.3)){
            //     ValveInsp = LastVinspVal + 5;
            // }
            // else{
            //     ValveInsp = LastVinspVal;
            // }
            InspExpState = 2;
            pvPut(InspExpState);
        } state Expiration_VC
    }
    state Expiration_VC {
        when (OpMode != OPM_VolumeControl)    {
            printf("sncVentilator: Ending cycle VC Mode \n");
            /*Close Vexp*/
        } state NON_VC
        when (CycleTime >= RrMaxTime) {
            printf("sncVentilator: VC Mode: Changing to Idle due to Time\n");
            ValveExp = 0; // Close Vexp
            pvPut(ValveExp);
            SensorPEEP = SensorPressure;
            pvPut(SensorPEEP);
            InspExpState = 0;
            pvPut(InspExpState);
        }state Idle_VC
        when (SensorPressure <= SetPEEP) {
            printf("sncVentilator: VC Mode: Changing to Idle due to PEEP\n");
            SensorPEEP = SensorPressure;
            pvPut(SensorPEEP);
            ValveExp = 0; // Close Vexp
            pvPut(ValveExp);
            InspExpState = 0;
            pvPut(InspExpState);
        }state Idle_VC
    }
}
/* Presure Control State Set */
// The pressure is constant during the inspiratory time and
// the flow is decelerating. If for any reason pressure decreases
// during inspiration, the flow from the ventilator will immediately
// increase to maintain the set inspiratory pressure
ss PressControl {
    state NON_PC {
        entry {
            RefPinspPC= 0; // CLoses PC Pinsp Valve
            pvPut(RefPinspPC);
        }
        when (OpMode == OPM_PressureControl )    {
            printf("sncVentilator: Startup OPM_PressureControl\n");
        } state Idle_PC
    }
    state Idle_PC {
        when (OpMode != OPM_PressureControl)    {
            printf("sncVentilator: Ending PC Mode \n");
        } state NON_PC
        when (CycleTime == 0.0) {
            printf("sncVentilator: PC Mode: Changing to Inspiration\n");
            /*
            ValveInsp = 40; // Change to CONSTANT
            pvPut(ValveInsp);
            SensorVolExp = SensorVolume;
            pvPut(SensorVolExp);
            */
            RefPinspPC= 100; // Open PC Pinsp Valve
            pvPut(RefPinspPC);
            InspExpState = 1;
            pvPut(InspExpState);
        } state Inspiration_PC
    }
    state Inspiration_PC {
        when (OpMode != OPM_PressureControl)    {
            printf("sncVentilator: Ending PC Mode \n");
            /*Close Valves*/
        } state NON_PC
        when (CycleTime >= SetTinsp) { //we should add condition if SensorPressure>= SetPpeak
        //when (SensorPressure >= SetPpeak) {
            printf("sncVentilator: PC Mode: Changing to Expiration\n");
            /*
            ValveInsp = 0; // Change to CONSTANT
            pvPut(ValveInsp);
            ValveExp = 1; // Change to CONSTANT
            pvPut(ValveExp);
            SensorMaxVol = SensorVolumeCalibrated;
            pvPut(SensorMaxVol);
            */
            RefPinspPC= 0; // CLoses PC Pinsp Valve
            pvPut(RefPinspPC);
            InspExpState = 2;
            pvPut(InspExpState);
        } state Expiration_PC
    }
    state Expiration_PC {
        when (OpMode != OPM_PressureControl)    {
            printf("sncVentilator: Ending PC Mode \n");
            /*Close Valves*/
        } state NON_PC
        when (CycleTime >= RrMaxTime) {
            printf("sncVentilator: PC Mode: Changing to Idle due to Time\n");
            ValveExp = 0; // Close Vexp
            pvPut(ValveExp);
            SensorPEEP = SensorPressure;
            pvPut(SensorPEEP);
        }state Idle_PC
        when (SensorPressure <= SetPEEP) {
            printf("sncVentilator: PC Mode: Changing to Idle due to PEEP\n");
            ValveExp = 0; // Close Vexp
            pvPut(ValveExp);
            SensorPEEP = SensorPressure;
            pvPut(SensorPEEP);
            InspExpState = 0;
            pvPut(InspExpState);
        }state Idle_PC
    }
}
/* Presure Support Control State Set */
// optional pressure support mode for those patients breathing to some extent
// themselves, for example, BIPAP. The user sets an inspiratory pressure
// and an expiratory pressure.
// The ventilator can sense when a patient starts to breathe in and
// apply the inspiratory pressure, then sense when the patient starts
// to breathe out and apply the expiratory pressure
// (this pressure is still positive but lower than the inspiratory pressure)
// If the patient stops breathing in pressure support mode, //
// it must failsafe automatically onto mandatory ventilation.

ss PSControl {
    state NON_PS {
        when (OpMode == OPM_PressureSupport  && CycleTime == 0.0)    {
            printf("sncVentilator: Startup OPM_PressureSupport \n");
            printf("sncVentilator: PS Mode: Changing to Inspiration\n");
            ValveInsp = 1; // Change to CONSTANT
            pvPut(ValveInsp);
        } state Inspiration_PS
    }
    state Inspiration_PS {
        when (OpMode != OPM_PressureSupport )    {
            printf("sncVentilator: Ending PS Mode \n");
            /*Close Valves*/
        } state NON_PS
        when (SensorPressure == SetPpeak) {
            printf("sncVentilator: PS Mode: Changing to Expiration\n");
            ValveInsp = 0; // Change to CONSTANT
            pvPut(ValveInsp);
            ValveExp = 1; // Change to CONSTANT
            pvPut(ValveExp);
            InspExpState = 2;
            pvPut(InspExpState);
        } state Expiration_PS
    }
    state Expiration_PS {
        when (OpMode != OPM_PressureSupport )    {
            printf("sncVentilator: Ending PS Mode \n");
            /*Close Valves*/
        } state NON_PS
        when ( SensorPressure <= SetPEEP) {
            printf("sncVentilator: PS Mode: Changing to After Insp\n");
            ValveInsp = 0; // Change to CONSTANT
            pvPut(ValveInsp);
            InspExpState = 0;
            pvPut(InspExpState);
        } state After_Expir_PS
        when (CycleTime >= RrMaxTime ) {
            printf("sncVentilator: PS Mode: Changing to Inspiration\n");
            ValveInsp = 1; // Change to CONSTANT
            pvPut(ValveInsp);
        } state Inspiration_PS
    }
    state After_Expir_PS {
        when (OpMode != OPM_PressureSupport )    {
            printf("sncVentilator: Ending PC Mode \n");
        } state NON_PS
        when (SensorPressurePS <= SetPtrigger) {
            printf("sncVentilator: PS Mode: Changing to Inspiration\n");
            // Sensor_RR = CycleTime;  Falta aqui uma PV
            //pvPut(Sensor_RR);
            CycleTime = 0.0; // Store RR and reset Cycle
            pvPut(CycleTime);
            ValveInsp = 0; // Change to CONSTANT
            pvPut(ValveInsp);
            InspExpState = 1;
            pvPut(InspExpState);
        } state Inspiration_PS
        when (CycleTime == 0.0) {
            printf("sncVentilator: PS Mode: Changing to Inspiration PS\n");
            // Sensor_RR = CycleTime;  Falta aqui uma PV
            //pvPut(Sensor_RR);
            ValveInsp = 1; // Change to CONSTANT
            pvPut(ValveInsp);
            InspExpState = 1;
            pvPut(InspExpState);
        } state Inspiration_PS
    }
}
